import java.util.*;
class Vertex {
    String data;
    int color;
    int dt;
    int ft;
    Vertex predecessor;
 Vertex(String data) {
        this.data = data;
        color = 0;
        dt = 0;
        ft = 0;
        predecessor = null;
    }
}
class DFSGraph {
    List<Vertex> vertices;
    Map<Vertex, List<Vertex>> adj;
    int time;
   DFSGraph(List<Vertex> vertices) {
        this.vertices = vertices;
        adj = new HashMap<>();
        time = 0;
    }
    void addEdge(Vertex u, Vertex v) {
        adj.computeIfAbsent(u, k -> new ArrayList<>()).add(v);
    }
    void addVertex(Vertex vertex) {
        adj.put(vertex, new ArrayList<>());
    }
    void DFS() {
        for (Vertex v : adj.keySet()) {
            v.color = 0;
            v.predecessor = null;
        }
        time = 0;
        for (Vertex v : adj.keySet()) {
            if (v.color == 0) {
                DFSVisit(v);
            }
        }
    }
    void DFSVisit(Vertex vertex) {
        time++;
        vertex.dt = time;
        vertex.color = 1;
        for (Vertex v : adj.getOrDefault(vertex, new ArrayList<>())) {
            if (v.color == 0) {
                v.predecessor = vertex;
                DFSVisit(v);
            }
        }
        vertex.color = 2;
        time++;
        vertex.ft = time;
    }
    void printGraph() {
        System.out.println("\n ---Adjacency List ---");
        for (Vertex v : adj.keySet()) {
            System.out.print(v.data + ": ");
            for (Vertex j : adj.getOrDefault(v, new ArrayList<>())) {
                System.out.print(j.data + " ");
            }
            System.out.println();
        }
        System.out.println("---End of Adjacency List ---");
    }
    public static void main(String[] args) {
        List<Vertex> vertices = new ArrayList<>();
        vertices.add(new Vertex("u"));
        vertices.add(new Vertex("v"));
        vertices.add(new Vertex("w"));
        vertices.add(new Vertex("x"));
        vertices.add(new Vertex("y"));
        vertices.add(new Vertex("z"));
        DFSGraph graph = new DFSGraph(vertices);
        graph.addEdge(vertices.get(0), vertices.get(1));
        graph.addEdge(vertices.get(0), vertices.get(3));
        graph.addEdge(vertices.get(3), vertices.get(1));
        graph.addEdge(vertices.get(1), vertices.get(4));
        graph.addEdge(vertices.get(4), vertices.get(3));
        graph.addEdge(vertices.get(2), vertices.get(4));
        graph.addEdge(vertices.get(2), vertices.get(5));
        graph.addEdge(vertices.get(5), vertices.get(5));
        graph.DFS();
        for (Vertex v : graph.adj.keySet()) {
            System.out.print(v.data + " (" + v.dt + "/" + v.ft + "), ");
        }
    }
}
