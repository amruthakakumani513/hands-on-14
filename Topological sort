import java.util.*;

class Graph {
    int vertices;
    int[][] edges;

    Graph(int vertices) {
        this.vertices = vertices;
        edges = new int[vertices][vertices];
        for (int i = 0; i < vertices; i++) {
            for (int j = 0; j < vertices; j++) {
                edges[i][j] = 0;
            }
        }
    }

    void addEdge(int u, int v) {
        edges[u][v] = 1;
    }

    void topologicalSort() {
        boolean[] visited = new boolean[vertices];
        Stack<Integer> stack = new Stack<>();
        for (int i = 0; i < vertices; i++) {
            visited[i] = false;
        }
        for (int i = 0; i < vertices; i++) {
            if (!visited[i]) {
                topologicalSortUtil(i, visited, stack);
            }
        }
        System.out.print("Topological Sort:");
        while (!stack.isEmpty()) {
            System.out.print(" " + stack.pop());
        }
        System.out.println();
    }

    void topologicalSortUtil(int v, boolean[] visited, Stack<Integer> stack) {
        visited[v] = true;
        for (int i = 0; i < vertices; i++) {
            if (edges[v][i] == 1 && !visited[i]) {
                topologicalSortUtil(i, visited, stack);
            }
        }
        stack.push(v);
    }
}

public class Main {
    public static void main(String[] args) {
        Graph g = new Graph(6);
        g.addEdge(10, 4);
        g.addEdge(8, 0);
        g.addEdge(9, 0);
        g.addEdge(8, 2);
        g.addEdge(4, 6);
        g.addEdge(6, 2);

        g.topologicalSort();
    }
}
